{"version":3,"file":"membrane-invitations-store.js","sourceRoot":"","sources":["../src/membrane-invitations-store.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AAExD,OAAO,EAAE,OAAO,EAAY,QAAQ,EAAE,MAAM,cAAc,CAAC;AAC3D,OAAO,EAAE,0BAA0B,EAAE,MAAM,gCAAgC,CAAC;AAG5E,MAAM,OAAO,wBAAwB;IAMnC,YACY,UAAsB,EAChC,QAAQ,GAAG,sBAAsB;QADvB,eAAU,GAAV,UAAU,CAAY;QAJlC,kBAAa,GACX,QAAQ,CAAC,IAAI,WAAW,EAA0B,CAAC,CAAC;QAMpD,IAAI,CAAC,OAAO,GAAG,IAAI,0BAA0B,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAEpE,UAAU,CAAC,gBAAgB,CAAC,CAAC,MAAM,EAAE,EAAE;YACrC,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YACpC,IAAI,OAAO,CAAC,IAAI,KAAK,eAAe,EAAE;gBACpC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE;oBAC9B,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC;oBACrD,OAAO,CAAC,CAAC;gBACX,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,IAAI,aAAa,GAAG,IAAI,WAAW,EAA0B,CAAC;QAC9D,MAAM,gBAAgB,GAA2C,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;QACvG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,EAAE,sBAAsB,CAAC,EAAE,EAAE;YAChE,aAAa,CAAC,GAAG,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAEtC,OAAO,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,oBAAgC;QACrD,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;QAE1D,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE;YAC9B,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;YAC/B,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { CellClient } from \"@holochain-open-dev/cell-client\";\nimport { HoloHashMap } from \"@holochain-open-dev/utils\";\nimport { ActionHash } from \"@holochain/client\";\nimport { derived, Writable, writable } from \"svelte/store\";\nimport { MembraneInvitationsService } from \"./membrane-invitations-service\";\nimport { JoinMembraneInvitation } from \"./types\";\n\nexport class MembraneInvitationsStore {\n  public service: MembraneInvitationsService;\n\n  myInvitations: Writable<HoloHashMap<JoinMembraneInvitation>> = // keys of type ActionHash\n    writable(new HoloHashMap<JoinMembraneInvitation>());\n\n  constructor(\n    protected cellClient: CellClient,\n    zomeName = \"membrane_invitations\"\n  ) {\n    this.service = new MembraneInvitationsService(cellClient, zomeName);\n\n    cellClient.addSignalHandler((signal) => {\n      const payload = signal.data.payload;\n      if (payload.type === \"NewInvitation\") {\n        this.myInvitations.update((i) => {\n          i[payload.invitationHeaderHash] = payload.invitation;\n          return i;\n        });\n      }\n    });\n  }\n\n  async fetchMyInvitations() {\n    let myInvitations = new HoloHashMap<JoinMembraneInvitation>();\n    const invitationsArray: [ActionHash, JoinMembraneInvitation][] = await this.service.getMyInvitations();\n    invitationsArray.forEach(([actionHash, joinMembraneInvitation]) => {\n      myInvitations.put(actionHash, joinMembraneInvitation);\n    })\n\n    this.myInvitations.set(myInvitations);\n\n    return derived(this.myInvitations, (i) => i);\n  }\n\n  async removeInvitation(invitationHeaderHash: ActionHash) {\n    await this.service.removeInvitation(invitationHeaderHash);\n\n    this.myInvitations.update((i) => {\n      i.delete(invitationHeaderHash);\n      return i;\n    });\n  }\n}\n"]}